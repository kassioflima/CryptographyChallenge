services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: cryptography-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Cryptography@123
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - cryptography-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Cryptography@123 -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Cryptography API
  cryptography-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cryptography-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__ConnectionString=Data Source=sqlserver,1433;Initial Catalog=CryptographyDb;User ID=SA;Password=Cryptography@123;Connect Timeout=30;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=True;MultipleActiveResultSets=True;
    ports:
      - "8080:8080"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - cryptography-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/swagger"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # SQL Server Management Studio (Optional - for database management)
  sqlserver-management:
    image: mcr.microsoft.com/mssql-tools:latest
    container_name: cryptography-sql-tools
    environment:
      - ACCEPT_EULA=Y
    depends_on:
      - sqlserver
    networks:
      - cryptography-network
    command: sleep infinity
    profiles:
      - tools

volumes:
  sqlserver_data:
    driver: local

networks:
  cryptography-network:
    driver: bridge